#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class BotSysdict(object):
    """
    引用系统词典关联

    Attributes:
     - chatbotID
     - dict_id
     - id
     - createdate

    """


    def __init__(self, chatbotID=None, dict_id=None, id=None, createdate=None,):
        self.chatbotID = chatbotID
        self.dict_id = dict_id
        self.id = id
        self.createdate = createdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dict_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BotSysdict')
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 1)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.dict_id is not None:
            oprot.writeFieldBegin('dict_id', TType.STRING, 2)
            oprot.writeString(self.dict_id.encode('utf-8') if sys.version_info[0] == 2 else self.dict_id)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 4)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatMessage(object):
    """
    聊天消息

    Attributes:
     - session_id
     - chatbotID
     - type
     - direction
     - branch
     - sender
     - receiver
     - createdate
     - id
     - textMessage
     - audioMessage
     - videoMessage
     - imageMessage
     - terms
     - tags
     - is_fallback
     - is_proactive

    """


    def __init__(self, session_id=None, chatbotID=None, type=None, direction=None, branch=None, sender=None, receiver=None, createdate=None, id=None, textMessage=None, audioMessage=None, videoMessage=None, imageMessage=None, terms=None, tags=None, is_fallback=None, is_proactive=None,):
        self.session_id = session_id
        self.chatbotID = chatbotID
        self.type = type
        self.direction = direction
        self.branch = branch
        self.sender = sender
        self.receiver = receiver
        self.createdate = createdate
        self.id = id
        self.textMessage = textMessage
        self.audioMessage = audioMessage
        self.videoMessage = videoMessage
        self.imageMessage = imageMessage
        self.terms = terms
        self.tags = tags
        self.is_fallback = is_fallback
        self.is_proactive = is_proactive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.branch = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sender = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.receiver = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.textMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.audioMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.videoMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.imageMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.terms = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.terms.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tags.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.is_fallback = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.is_proactive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatMessage')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 2)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 4)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.branch is not None:
            oprot.writeFieldBegin('branch', TType.I32, 5)
            oprot.writeI32(self.branch)
            oprot.writeFieldEnd()
        if self.sender is not None:
            oprot.writeFieldBegin('sender', TType.STRING, 6)
            oprot.writeString(self.sender.encode('utf-8') if sys.version_info[0] == 2 else self.sender)
            oprot.writeFieldEnd()
        if self.receiver is not None:
            oprot.writeFieldBegin('receiver', TType.STRING, 7)
            oprot.writeString(self.receiver.encode('utf-8') if sys.version_info[0] == 2 else self.receiver)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 8)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 9)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.textMessage is not None:
            oprot.writeFieldBegin('textMessage', TType.STRING, 10)
            oprot.writeString(self.textMessage.encode('utf-8') if sys.version_info[0] == 2 else self.textMessage)
            oprot.writeFieldEnd()
        if self.audioMessage is not None:
            oprot.writeFieldBegin('audioMessage', TType.STRING, 11)
            oprot.writeString(self.audioMessage.encode('utf-8') if sys.version_info[0] == 2 else self.audioMessage)
            oprot.writeFieldEnd()
        if self.videoMessage is not None:
            oprot.writeFieldBegin('videoMessage', TType.STRING, 12)
            oprot.writeString(self.videoMessage.encode('utf-8') if sys.version_info[0] == 2 else self.videoMessage)
            oprot.writeFieldEnd()
        if self.imageMessage is not None:
            oprot.writeFieldBegin('imageMessage', TType.STRING, 13)
            oprot.writeString(self.imageMessage.encode('utf-8') if sys.version_info[0] == 2 else self.imageMessage)
            oprot.writeFieldEnd()
        if self.terms is not None:
            oprot.writeFieldBegin('terms', TType.LIST, 14)
            oprot.writeListBegin(TType.STRING, len(self.terms))
            for iter12 in self.terms:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.tags))
            for iter13 in self.tags:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_fallback is not None:
            oprot.writeFieldBegin('is_fallback', TType.BOOL, 16)
            oprot.writeBool(self.is_fallback)
            oprot.writeFieldEnd()
        if self.is_proactive is not None:
            oprot.writeFieldBegin('is_proactive', TType.BOOL, 17)
            oprot.writeBool(self.is_proactive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Entity(object):
    """
    命名实体标识

    Attributes:
     - name
     - val
     - requires
     - dictname

    """


    def __init__(self, name=None, val=None, requires=None, dictname=None,):
        self.name = name
        self.val = val
        self.requires = requires
        self.dictname = dictname

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.val = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.requires = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dictname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Entity')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.val is not None:
            oprot.writeFieldBegin('val', TType.STRING, 2)
            oprot.writeString(self.val.encode('utf-8') if sys.version_info[0] == 2 else self.val)
            oprot.writeFieldEnd()
        if self.requires is not None:
            oprot.writeFieldBegin('requires', TType.BOOL, 3)
            oprot.writeBool(self.requires)
            oprot.writeFieldEnd()
        if self.dictname is not None:
            oprot.writeFieldBegin('dictname', TType.STRING, 4)
            oprot.writeString(self.dictname.encode('utf-8') if sys.version_info[0] == 2 else self.dictname)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatSession(object):
    """
    聊天会话

    Attributes:
     - intent_name
     - chatbotID
     - uid
     - channel
     - resolved
     - id
     - entities
     - branch
     - createdate
     - updatedate

    """


    def __init__(self, intent_name=None, chatbotID=None, uid=None, channel=None, resolved=None, id=None, entities=None, branch=None, createdate=None, updatedate=None,):
        self.intent_name = intent_name
        self.chatbotID = chatbotID
        self.uid = uid
        self.channel = channel
        self.resolved = resolved
        self.id = id
        self.entities = entities
        self.branch = branch
        self.createdate = createdate
        self.updatedate = updatedate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.intent_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.channel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.resolved = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.entities = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Entity()
                        _elem19.read(iprot)
                        self.entities.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.branch = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.updatedate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatSession')
        if self.intent_name is not None:
            oprot.writeFieldBegin('intent_name', TType.STRING, 1)
            oprot.writeString(self.intent_name.encode('utf-8') if sys.version_info[0] == 2 else self.intent_name)
            oprot.writeFieldEnd()
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 2)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 3)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.STRING, 4)
            oprot.writeString(self.channel.encode('utf-8') if sys.version_info[0] == 2 else self.channel)
            oprot.writeFieldEnd()
        if self.resolved is not None:
            oprot.writeFieldBegin('resolved', TType.BOOL, 5)
            oprot.writeBool(self.resolved)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 6)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.entities is not None:
            oprot.writeFieldBegin('entities', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.entities))
            for iter20 in self.entities:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.branch is not None:
            oprot.writeFieldBegin('branch', TType.STRING, 8)
            oprot.writeString(self.branch.encode('utf-8') if sys.version_info[0] == 2 else self.branch)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 9)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.updatedate is not None:
            oprot.writeFieldBegin('updatedate', TType.STRING, 10)
            oprot.writeString(self.updatedate.encode('utf-8') if sys.version_info[0] == 2 else self.updatedate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DictWord(object):
    """
    词条

    Attributes:
     - word
     - dict_id
     - synonyms
     - tag
     - lang
     - createdate
     - updatedate

    """


    def __init__(self, word=None, dict_id=None, synonyms=None, tag=None, lang=None, createdate=None, updatedate=None,):
        self.word = word
        self.dict_id = dict_id
        self.synonyms = synonyms
        self.tag = tag
        self.lang = lang
        self.createdate = createdate
        self.updatedate = updatedate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.word = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dict_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.synonyms = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.lang = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.updatedate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DictWord')
        if self.word is not None:
            oprot.writeFieldBegin('word', TType.STRING, 1)
            oprot.writeString(self.word.encode('utf-8') if sys.version_info[0] == 2 else self.word)
            oprot.writeFieldEnd()
        if self.dict_id is not None:
            oprot.writeFieldBegin('dict_id', TType.STRING, 2)
            oprot.writeString(self.dict_id.encode('utf-8') if sys.version_info[0] == 2 else self.dict_id)
            oprot.writeFieldEnd()
        if self.synonyms is not None:
            oprot.writeFieldBegin('synonyms', TType.STRING, 3)
            oprot.writeString(self.synonyms.encode('utf-8') if sys.version_info[0] == 2 else self.synonyms)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 4)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.lang is not None:
            oprot.writeFieldBegin('lang', TType.STRING, 5)
            oprot.writeString(self.lang.encode('utf-8') if sys.version_info[0] == 2 else self.lang)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 6)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.updatedate is not None:
            oprot.writeFieldBegin('updatedate', TType.STRING, 7)
            oprot.writeString(self.updatedate.encode('utf-8') if sys.version_info[0] == 2 else self.updatedate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Dict(object):
    """
    词典

    Attributes:
     - name
     - chatbotID
     - builtin
     - active
     - id
     - description
     - samples
     - createdate
     - updatedate
     - referred

    """


    def __init__(self, name=None, chatbotID=None, builtin=None, active=None, id=None, description=None, samples=None, createdate=None, updatedate=None, referred=None,):
        self.name = name
        self.chatbotID = chatbotID
        self.builtin = builtin
        self.active = active
        self.id = id
        self.description = description
        self.samples = samples
        self.createdate = createdate
        self.updatedate = updatedate
        self.referred = referred

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.builtin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.samples = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.updatedate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.referred = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Dict')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 2)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.builtin is not None:
            oprot.writeFieldBegin('builtin', TType.BOOL, 3)
            oprot.writeBool(self.builtin)
            oprot.writeFieldEnd()
        if self.active is not None:
            oprot.writeFieldBegin('active', TType.BOOL, 4)
            oprot.writeBool(self.active)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 5)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.samples is not None:
            oprot.writeFieldBegin('samples', TType.STRING, 7)
            oprot.writeString(self.samples.encode('utf-8') if sys.version_info[0] == 2 else self.samples)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 8)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.updatedate is not None:
            oprot.writeFieldBegin('updatedate', TType.STRING, 9)
            oprot.writeString(self.updatedate.encode('utf-8') if sys.version_info[0] == 2 else self.updatedate)
            oprot.writeFieldEnd()
        if self.referred is not None:
            oprot.writeFieldBegin('referred', TType.BOOL, 10)
            oprot.writeBool(self.referred)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Intent(object):
    """
    意图

    Attributes:
     - chatbotID
     - name
     - id
     - description
     - createdate
     - updatedate

    """


    def __init__(self, chatbotID=None, name=None, id=None, description=None, createdate=None, updatedate=None,):
        self.chatbotID = chatbotID
        self.name = name
        self.id = id
        self.description = description
        self.createdate = createdate
        self.updatedate = updatedate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.updatedate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Intent')
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 1)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 5)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.updatedate is not None:
            oprot.writeFieldBegin('updatedate', TType.STRING, 6)
            oprot.writeString(self.updatedate.encode('utf-8') if sys.version_info[0] == 2 else self.updatedate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IntentSlot(object):
    """
    意图槽位

    Attributes:
     - intent_id
     - name
     - dict_id
     - requires
     - id
     - createdate
     - updatedate
     - question
     - dict

    """


    def __init__(self, intent_id=None, name=None, dict_id=None, requires=None, id=None, createdate=None, updatedate=None, question=None, dict=None,):
        self.intent_id = intent_id
        self.name = name
        self.dict_id = dict_id
        self.requires = requires
        self.id = id
        self.createdate = createdate
        self.updatedate = updatedate
        self.question = question
        self.dict = dict

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.intent_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dict_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.requires = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.updatedate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.question = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.dict = Dict()
                    self.dict.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IntentSlot')
        if self.intent_id is not None:
            oprot.writeFieldBegin('intent_id', TType.STRING, 1)
            oprot.writeString(self.intent_id.encode('utf-8') if sys.version_info[0] == 2 else self.intent_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.dict_id is not None:
            oprot.writeFieldBegin('dict_id', TType.STRING, 3)
            oprot.writeString(self.dict_id.encode('utf-8') if sys.version_info[0] == 2 else self.dict_id)
            oprot.writeFieldEnd()
        if self.requires is not None:
            oprot.writeFieldBegin('requires', TType.BOOL, 4)
            oprot.writeBool(self.requires)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 5)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 6)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.updatedate is not None:
            oprot.writeFieldBegin('updatedate', TType.STRING, 7)
            oprot.writeString(self.updatedate.encode('utf-8') if sys.version_info[0] == 2 else self.updatedate)
            oprot.writeFieldEnd()
        if self.question is not None:
            oprot.writeFieldBegin('question', TType.STRING, 8)
            oprot.writeString(self.question.encode('utf-8') if sys.version_info[0] == 2 else self.question)
            oprot.writeFieldEnd()
        if self.dict is not None:
            oprot.writeFieldBegin('dict', TType.STRUCT, 9)
            self.dict.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IntentUtter(object):
    """
    意图说法

    Attributes:
     - intent_id
     - utterance
     - id
     - createdate
     - updatedate

    """


    def __init__(self, intent_id=None, utterance=None, id=None, createdate=None, updatedate=None,):
        self.intent_id = intent_id
        self.utterance = utterance
        self.id = id
        self.createdate = createdate
        self.updatedate = updatedate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.intent_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.utterance = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.updatedate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IntentUtter')
        if self.intent_id is not None:
            oprot.writeFieldBegin('intent_id', TType.STRING, 1)
            oprot.writeString(self.intent_id.encode('utf-8') if sys.version_info[0] == 2 else self.intent_id)
            oprot.writeFieldEnd()
        if self.utterance is not None:
            oprot.writeFieldBegin('utterance', TType.STRING, 2)
            oprot.writeString(self.utterance.encode('utf-8') if sys.version_info[0] == 2 else self.utterance)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 4)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.updatedate is not None:
            oprot.writeFieldBegin('updatedate', TType.STRING, 5)
            oprot.writeString(self.updatedate.encode('utf-8') if sys.version_info[0] == 2 else self.updatedate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProdVersion(object):
    """
    上线版本

    Attributes:
     - chatbotID
     - version
     - active
     - latest
     - id
     - operated
     - notes
     - createdate

    """


    def __init__(self, chatbotID=None, version=None, active=None, latest=None, id=None, operated=None, notes=None, createdate=None,):
        self.chatbotID = chatbotID
        self.version = version
        self.active = active
        self.latest = latest
        self.id = id
        self.operated = operated
        self.notes = notes
        self.createdate = createdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.latest = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.operated = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.notes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProdVersion')
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 1)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.active is not None:
            oprot.writeFieldBegin('active', TType.BOOL, 3)
            oprot.writeBool(self.active)
            oprot.writeFieldEnd()
        if self.latest is not None:
            oprot.writeFieldBegin('latest', TType.BOOL, 4)
            oprot.writeBool(self.latest)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 5)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.operated is not None:
            oprot.writeFieldBegin('operated', TType.STRING, 6)
            oprot.writeString(self.operated.encode('utf-8') if sys.version_info[0] == 2 else self.operated)
            oprot.writeFieldEnd()
        if self.notes is not None:
            oprot.writeFieldBegin('notes', TType.STRING, 7)
            oprot.writeString(self.notes.encode('utf-8') if sys.version_info[0] == 2 else self.notes)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 8)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DevelopVersion(object):
    """
    调试版本

    Attributes:
     - chatbotID
     - version
     - published
     - id
     - createdate
     - operated

    """


    def __init__(self, chatbotID=None, version=None, published=None, id=None, createdate=None, operated=None,):
        self.chatbotID = chatbotID
        self.version = version
        self.published = published
        self.id = id
        self.createdate = createdate
        self.operated = operated

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.published = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.createdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.operated = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DevelopVersion')
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 1)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.published is not None:
            oprot.writeFieldBegin('published', TType.BOOL, 3)
            oprot.writeBool(self.published)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 4)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.createdate is not None:
            oprot.writeFieldBegin('createdate', TType.STRING, 5)
            oprot.writeString(self.createdate.encode('utf-8') if sys.version_info[0] == 2 else self.createdate)
            oprot.writeFieldEnd()
        if self.operated is not None:
            oprot.writeFieldBegin('operated', TType.STRING, 6)
            oprot.writeString(self.operated.encode('utf-8') if sys.version_info[0] == 2 else self.operated)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Data(object):
    """
    Clause Data Bundle

    Attributes:
     - rc
     - error
     - msg
     - id
     - chatbotID
     - customdicts
     - sysdicts
     - botsysdicts
     - dictwords
     - customdict
     - sysdict
     - botsysdict
     - dictword
     - intents
     - slots
     - utters
     - intent
     - slot
     - utter
     - devvers
     - provers
     - devver
     - prover
     - sessions
     - messages
     - session
     - message
     - currpage
     - totalpage
     - totalrows
     - pagesize
     - page
     - query

    """


    def __init__(self, rc=None, error=None, msg=None, id=None, chatbotID=None, customdicts=None, sysdicts=None, botsysdicts=None, dictwords=None, customdict=None, sysdict=None, botsysdict=None, dictword=None, intents=None, slots=None, utters=None, intent=None, slot=None, utter=None, devvers=None, provers=None, devver=None, prover=None, sessions=None, messages=None, session=None, message=None, currpage=None, totalpage=None, totalrows=None, pagesize=None, page=None, query=None,):
        self.rc = rc
        self.error = error
        self.msg = msg
        self.id = id
        self.chatbotID = chatbotID
        self.customdicts = customdicts
        self.sysdicts = sysdicts
        self.botsysdicts = botsysdicts
        self.dictwords = dictwords
        self.customdict = customdict
        self.sysdict = sysdict
        self.botsysdict = botsysdict
        self.dictword = dictword
        self.intents = intents
        self.slots = slots
        self.utters = utters
        self.intent = intent
        self.slot = slot
        self.utter = utter
        self.devvers = devvers
        self.provers = provers
        self.devver = devver
        self.prover = prover
        self.sessions = sessions
        self.messages = messages
        self.session = session
        self.message = message
        self.currpage = currpage
        self.totalpage = totalpage
        self.totalrows = totalrows
        self.pagesize = pagesize
        self.page = page
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.rc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.chatbotID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.customdicts = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Dict()
                        _elem26.read(iprot)
                        self.customdicts.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.sysdicts = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = Dict()
                        _elem32.read(iprot)
                        self.sysdicts.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.botsysdicts = []
                    (_etype36, _size33) = iprot.readListBegin()
                    for _i37 in range(_size33):
                        _elem38 = BotSysdict()
                        _elem38.read(iprot)
                        self.botsysdicts.append(_elem38)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.dictwords = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = DictWord()
                        _elem44.read(iprot)
                        self.dictwords.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.customdict = Dict()
                    self.customdict.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.sysdict = Dict()
                    self.sysdict.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.botsysdict = BotSysdict()
                    self.botsysdict.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.dictword = DictWord()
                    self.dictword.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.intents = []
                    (_etype48, _size45) = iprot.readListBegin()
                    for _i49 in range(_size45):
                        _elem50 = Intent()
                        _elem50.read(iprot)
                        self.intents.append(_elem50)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.slots = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = IntentSlot()
                        _elem56.read(iprot)
                        self.slots.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.utters = []
                    (_etype60, _size57) = iprot.readListBegin()
                    for _i61 in range(_size57):
                        _elem62 = IntentUtter()
                        _elem62.read(iprot)
                        self.utters.append(_elem62)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.intent = Intent()
                    self.intent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.slot = IntentSlot()
                    self.slot.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.utter = IntentUtter()
                    self.utter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.devvers = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = DevelopVersion()
                        _elem68.read(iprot)
                        self.devvers.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.provers = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = ProdVersion()
                        _elem74.read(iprot)
                        self.provers.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.devver = DevelopVersion()
                    self.devver.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRUCT:
                    self.prover = ProdVersion()
                    self.prover.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.LIST:
                    self.sessions = []
                    (_etype78, _size75) = iprot.readListBegin()
                    for _i79 in range(_size75):
                        _elem80 = ChatSession()
                        _elem80.read(iprot)
                        self.sessions.append(_elem80)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.LIST:
                    self.messages = []
                    (_etype84, _size81) = iprot.readListBegin()
                    for _i85 in range(_size81):
                        _elem86 = ChatMessage()
                        _elem86.read(iprot)
                        self.messages.append(_elem86)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.session = ChatSession()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.message = ChatMessage()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.currpage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.totalpage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.totalrows = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.pagesize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.I32:
                    self.page = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.query = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Data')
        if self.rc is not None:
            oprot.writeFieldBegin('rc', TType.I32, 1)
            oprot.writeI32(self.rc)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 2)
            oprot.writeString(self.error.encode('utf-8') if sys.version_info[0] == 2 else self.error)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 3)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 4)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.chatbotID is not None:
            oprot.writeFieldBegin('chatbotID', TType.STRING, 5)
            oprot.writeString(self.chatbotID.encode('utf-8') if sys.version_info[0] == 2 else self.chatbotID)
            oprot.writeFieldEnd()
        if self.customdicts is not None:
            oprot.writeFieldBegin('customdicts', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.customdicts))
            for iter87 in self.customdicts:
                iter87.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sysdicts is not None:
            oprot.writeFieldBegin('sysdicts', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.sysdicts))
            for iter88 in self.sysdicts:
                iter88.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.botsysdicts is not None:
            oprot.writeFieldBegin('botsysdicts', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.botsysdicts))
            for iter89 in self.botsysdicts:
                iter89.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dictwords is not None:
            oprot.writeFieldBegin('dictwords', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.dictwords))
            for iter90 in self.dictwords:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.customdict is not None:
            oprot.writeFieldBegin('customdict', TType.STRUCT, 10)
            self.customdict.write(oprot)
            oprot.writeFieldEnd()
        if self.sysdict is not None:
            oprot.writeFieldBegin('sysdict', TType.STRUCT, 11)
            self.sysdict.write(oprot)
            oprot.writeFieldEnd()
        if self.botsysdict is not None:
            oprot.writeFieldBegin('botsysdict', TType.STRUCT, 12)
            self.botsysdict.write(oprot)
            oprot.writeFieldEnd()
        if self.dictword is not None:
            oprot.writeFieldBegin('dictword', TType.STRUCT, 13)
            self.dictword.write(oprot)
            oprot.writeFieldEnd()
        if self.intents is not None:
            oprot.writeFieldBegin('intents', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.intents))
            for iter91 in self.intents:
                iter91.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.slots is not None:
            oprot.writeFieldBegin('slots', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.slots))
            for iter92 in self.slots:
                iter92.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.utters is not None:
            oprot.writeFieldBegin('utters', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.utters))
            for iter93 in self.utters:
                iter93.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.intent is not None:
            oprot.writeFieldBegin('intent', TType.STRUCT, 17)
            self.intent.write(oprot)
            oprot.writeFieldEnd()
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.STRUCT, 18)
            self.slot.write(oprot)
            oprot.writeFieldEnd()
        if self.utter is not None:
            oprot.writeFieldBegin('utter', TType.STRUCT, 19)
            self.utter.write(oprot)
            oprot.writeFieldEnd()
        if self.devvers is not None:
            oprot.writeFieldBegin('devvers', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.devvers))
            for iter94 in self.devvers:
                iter94.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.provers is not None:
            oprot.writeFieldBegin('provers', TType.LIST, 21)
            oprot.writeListBegin(TType.STRUCT, len(self.provers))
            for iter95 in self.provers:
                iter95.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.devver is not None:
            oprot.writeFieldBegin('devver', TType.STRUCT, 22)
            self.devver.write(oprot)
            oprot.writeFieldEnd()
        if self.prover is not None:
            oprot.writeFieldBegin('prover', TType.STRUCT, 23)
            self.prover.write(oprot)
            oprot.writeFieldEnd()
        if self.sessions is not None:
            oprot.writeFieldBegin('sessions', TType.LIST, 24)
            oprot.writeListBegin(TType.STRUCT, len(self.sessions))
            for iter96 in self.sessions:
                iter96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.messages is not None:
            oprot.writeFieldBegin('messages', TType.LIST, 25)
            oprot.writeListBegin(TType.STRUCT, len(self.messages))
            for iter97 in self.messages:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 26)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 27)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        if self.currpage is not None:
            oprot.writeFieldBegin('currpage', TType.I32, 28)
            oprot.writeI32(self.currpage)
            oprot.writeFieldEnd()
        if self.totalpage is not None:
            oprot.writeFieldBegin('totalpage', TType.I32, 29)
            oprot.writeI32(self.totalpage)
            oprot.writeFieldEnd()
        if self.totalrows is not None:
            oprot.writeFieldBegin('totalrows', TType.I32, 30)
            oprot.writeI32(self.totalrows)
            oprot.writeFieldEnd()
        if self.pagesize is not None:
            oprot.writeFieldBegin('pagesize', TType.I32, 31)
            oprot.writeI32(self.pagesize)
            oprot.writeFieldEnd()
        if self.page is not None:
            oprot.writeFieldBegin('page', TType.I32, 32)
            oprot.writeI32(self.page)
            oprot.writeFieldEnd()
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 33)
            oprot.writeString(self.query.encode('utf-8') if sys.version_info[0] == 2 else self.query)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BotSysdict)
BotSysdict.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dict_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'createdate', 'UTF8', None, ),  # 4
)
all_structs.append(ChatMessage)
ChatMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I32, 'direction', None, None, ),  # 4
    (5, TType.I32, 'branch', None, None, ),  # 5
    (6, TType.STRING, 'sender', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'receiver', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'createdate', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'id', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'textMessage', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'audioMessage', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'videoMessage', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'imageMessage', 'UTF8', None, ),  # 13
    (14, TType.LIST, 'terms', (TType.STRING, 'UTF8', False), None, ),  # 14
    (15, TType.LIST, 'tags', (TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.BOOL, 'is_fallback', None, None, ),  # 16
    (17, TType.BOOL, 'is_proactive', None, None, ),  # 17
)
all_structs.append(Entity)
Entity.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'val', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'requires', None, None, ),  # 3
    (4, TType.STRING, 'dictname', 'UTF8', None, ),  # 4
)
all_structs.append(ChatSession)
ChatSession.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'intent_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'uid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'channel', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'resolved', None, None, ),  # 5
    (6, TType.STRING, 'id', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'entities', (TType.STRUCT, [Entity, None], False), None, ),  # 7
    (8, TType.STRING, 'branch', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'createdate', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'updatedate', 'UTF8', None, ),  # 10
)
all_structs.append(DictWord)
DictWord.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'word', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dict_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'synonyms', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tag', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'lang', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'createdate', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'updatedate', 'UTF8', None, ),  # 7
)
all_structs.append(Dict)
Dict.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'builtin', None, None, ),  # 3
    (4, TType.BOOL, 'active', None, None, ),  # 4
    (5, TType.STRING, 'id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'samples', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'createdate', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'updatedate', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'referred', None, None, ),  # 10
)
all_structs.append(Intent)
Intent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'createdate', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'updatedate', 'UTF8', None, ),  # 6
)
all_structs.append(IntentSlot)
IntentSlot.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'intent_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'dict_id', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'requires', None, None, ),  # 4
    (5, TType.STRING, 'id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'createdate', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'updatedate', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'question', 'UTF8', None, ),  # 8
    (9, TType.STRUCT, 'dict', [Dict, None], None, ),  # 9
)
all_structs.append(IntentUtter)
IntentUtter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'intent_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'utterance', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'createdate', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'updatedate', 'UTF8', None, ),  # 5
)
all_structs.append(ProdVersion)
ProdVersion.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'active', None, None, ),  # 3
    (4, TType.BOOL, 'latest', None, None, ),  # 4
    (5, TType.STRING, 'id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'operated', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'notes', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'createdate', 'UTF8', None, ),  # 8
)
all_structs.append(DevelopVersion)
DevelopVersion.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'published', None, None, ),  # 3
    (4, TType.STRING, 'id', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'createdate', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'operated', 'UTF8', None, ),  # 6
)
all_structs.append(Data)
Data.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rc', None, None, ),  # 1
    (2, TType.STRING, 'error', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'msg', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'id', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'chatbotID', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'customdicts', (TType.STRUCT, [Dict, None], False), None, ),  # 6
    (7, TType.LIST, 'sysdicts', (TType.STRUCT, [Dict, None], False), None, ),  # 7
    (8, TType.LIST, 'botsysdicts', (TType.STRUCT, [BotSysdict, None], False), None, ),  # 8
    (9, TType.LIST, 'dictwords', (TType.STRUCT, [DictWord, None], False), None, ),  # 9
    (10, TType.STRUCT, 'customdict', [Dict, None], None, ),  # 10
    (11, TType.STRUCT, 'sysdict', [Dict, None], None, ),  # 11
    (12, TType.STRUCT, 'botsysdict', [BotSysdict, None], None, ),  # 12
    (13, TType.STRUCT, 'dictword', [DictWord, None], None, ),  # 13
    (14, TType.LIST, 'intents', (TType.STRUCT, [Intent, None], False), None, ),  # 14
    (15, TType.LIST, 'slots', (TType.STRUCT, [IntentSlot, None], False), None, ),  # 15
    (16, TType.LIST, 'utters', (TType.STRUCT, [IntentUtter, None], False), None, ),  # 16
    (17, TType.STRUCT, 'intent', [Intent, None], None, ),  # 17
    (18, TType.STRUCT, 'slot', [IntentSlot, None], None, ),  # 18
    (19, TType.STRUCT, 'utter', [IntentUtter, None], None, ),  # 19
    (20, TType.LIST, 'devvers', (TType.STRUCT, [DevelopVersion, None], False), None, ),  # 20
    (21, TType.LIST, 'provers', (TType.STRUCT, [ProdVersion, None], False), None, ),  # 21
    (22, TType.STRUCT, 'devver', [DevelopVersion, None], None, ),  # 22
    (23, TType.STRUCT, 'prover', [ProdVersion, None], None, ),  # 23
    (24, TType.LIST, 'sessions', (TType.STRUCT, [ChatSession, None], False), None, ),  # 24
    (25, TType.LIST, 'messages', (TType.STRUCT, [ChatMessage, None], False), None, ),  # 25
    (26, TType.STRUCT, 'session', [ChatSession, None], None, ),  # 26
    (27, TType.STRUCT, 'message', [ChatMessage, None], None, ),  # 27
    (28, TType.I32, 'currpage', None, None, ),  # 28
    (29, TType.I32, 'totalpage', None, None, ),  # 29
    (30, TType.I32, 'totalrows', None, None, ),  # 30
    (31, TType.I32, 'pagesize', None, None, ),  # 31
    (32, TType.I32, 'page', None, None, ),  # 32
    (33, TType.STRING, 'query', 'UTF8', None, ),  # 33
)
fix_spec(all_structs)
del all_structs
