#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from clause import Serving
from clause.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Data postCustomDict(Data request)')
    print('  Data putCustomDict(Data request)')
    print('  Data getCustomDicts(Data request)')
    print('  Data getCustomDict(Data request)')
    print('  Data delCustomDict(Data request)')
    print('  Data postSysDict(Data request)')
    print('  Data putSysDict(Data request)')
    print('  Data getSysDicts(Data request)')
    print('  Data getSysDict(Data request)')
    print('  Data refSysDict(Data request)')
    print('  Data unrefSysDict(Data request)')
    print('  Data myDicts(Data request)')
    print('  Data mySysdicts(Data request)')
    print('  Data putDictWord(Data request)')
    print('  Data getDictWords(Data request)')
    print('  Data delDictWord(Data request)')
    print('  Data hasDictWord(Data request)')
    print('  Data getDictPattern(Data request)')
    print('  Data putDictPattern(Data request)')
    print('  Data checkDictPattern(Data request)')
    print('  Data checkHistoryDictPattern(Data request)')
    print('  Data postIntent(Data request)')
    print('  Data putIntent(Data request)')
    print('  Data getIntents(Data request)')
    print('  Data getIntent(Data request)')
    print('  Data delIntent(Data request)')
    print('  Data postUtter(Data request)')
    print('  Data putUtter(Data request)')
    print('  Data getUtters(Data request)')
    print('  Data getUtter(Data request)')
    print('  Data delUtter(Data request)')
    print('  Data postSlot(Data request)')
    print('  Data putSlot(Data request)')
    print('  Data getSlots(Data request)')
    print('  Data getSlot(Data request)')
    print('  Data delSlot(Data request)')
    print('  Data train(Data request)')
    print('  Data status(Data request)')
    print('  Data devver(Data request)')
    print('  Data prover(Data request)')
    print('  Data version(Data request)')
    print('  Data chat(Data request)')
    print('  Data online(Data request)')
    print('  Data offline(Data request)')
    print('  Data putSession(Data request)')
    print('  Data getSession(Data request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Serving.Client(protocol)
transport.open()

if cmd == 'postCustomDict':
    if len(args) != 1:
        print('postCustomDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.postCustomDict(eval(args[0]),))

elif cmd == 'putCustomDict':
    if len(args) != 1:
        print('putCustomDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.putCustomDict(eval(args[0]),))

elif cmd == 'getCustomDicts':
    if len(args) != 1:
        print('getCustomDicts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCustomDicts(eval(args[0]),))

elif cmd == 'getCustomDict':
    if len(args) != 1:
        print('getCustomDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCustomDict(eval(args[0]),))

elif cmd == 'delCustomDict':
    if len(args) != 1:
        print('delCustomDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.delCustomDict(eval(args[0]),))

elif cmd == 'postSysDict':
    if len(args) != 1:
        print('postSysDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.postSysDict(eval(args[0]),))

elif cmd == 'putSysDict':
    if len(args) != 1:
        print('putSysDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.putSysDict(eval(args[0]),))

elif cmd == 'getSysDicts':
    if len(args) != 1:
        print('getSysDicts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSysDicts(eval(args[0]),))

elif cmd == 'getSysDict':
    if len(args) != 1:
        print('getSysDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSysDict(eval(args[0]),))

elif cmd == 'refSysDict':
    if len(args) != 1:
        print('refSysDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.refSysDict(eval(args[0]),))

elif cmd == 'unrefSysDict':
    if len(args) != 1:
        print('unrefSysDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.unrefSysDict(eval(args[0]),))

elif cmd == 'myDicts':
    if len(args) != 1:
        print('myDicts requires 1 args')
        sys.exit(1)
    pp.pprint(client.myDicts(eval(args[0]),))

elif cmd == 'mySysdicts':
    if len(args) != 1:
        print('mySysdicts requires 1 args')
        sys.exit(1)
    pp.pprint(client.mySysdicts(eval(args[0]),))

elif cmd == 'putDictWord':
    if len(args) != 1:
        print('putDictWord requires 1 args')
        sys.exit(1)
    pp.pprint(client.putDictWord(eval(args[0]),))

elif cmd == 'getDictWords':
    if len(args) != 1:
        print('getDictWords requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDictWords(eval(args[0]),))

elif cmd == 'delDictWord':
    if len(args) != 1:
        print('delDictWord requires 1 args')
        sys.exit(1)
    pp.pprint(client.delDictWord(eval(args[0]),))

elif cmd == 'hasDictWord':
    if len(args) != 1:
        print('hasDictWord requires 1 args')
        sys.exit(1)
    pp.pprint(client.hasDictWord(eval(args[0]),))

elif cmd == 'getDictPattern':
    if len(args) != 1:
        print('getDictPattern requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDictPattern(eval(args[0]),))

elif cmd == 'putDictPattern':
    if len(args) != 1:
        print('putDictPattern requires 1 args')
        sys.exit(1)
    pp.pprint(client.putDictPattern(eval(args[0]),))

elif cmd == 'checkDictPattern':
    if len(args) != 1:
        print('checkDictPattern requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkDictPattern(eval(args[0]),))

elif cmd == 'checkHistoryDictPattern':
    if len(args) != 1:
        print('checkHistoryDictPattern requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkHistoryDictPattern(eval(args[0]),))

elif cmd == 'postIntent':
    if len(args) != 1:
        print('postIntent requires 1 args')
        sys.exit(1)
    pp.pprint(client.postIntent(eval(args[0]),))

elif cmd == 'putIntent':
    if len(args) != 1:
        print('putIntent requires 1 args')
        sys.exit(1)
    pp.pprint(client.putIntent(eval(args[0]),))

elif cmd == 'getIntents':
    if len(args) != 1:
        print('getIntents requires 1 args')
        sys.exit(1)
    pp.pprint(client.getIntents(eval(args[0]),))

elif cmd == 'getIntent':
    if len(args) != 1:
        print('getIntent requires 1 args')
        sys.exit(1)
    pp.pprint(client.getIntent(eval(args[0]),))

elif cmd == 'delIntent':
    if len(args) != 1:
        print('delIntent requires 1 args')
        sys.exit(1)
    pp.pprint(client.delIntent(eval(args[0]),))

elif cmd == 'postUtter':
    if len(args) != 1:
        print('postUtter requires 1 args')
        sys.exit(1)
    pp.pprint(client.postUtter(eval(args[0]),))

elif cmd == 'putUtter':
    if len(args) != 1:
        print('putUtter requires 1 args')
        sys.exit(1)
    pp.pprint(client.putUtter(eval(args[0]),))

elif cmd == 'getUtters':
    if len(args) != 1:
        print('getUtters requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUtters(eval(args[0]),))

elif cmd == 'getUtter':
    if len(args) != 1:
        print('getUtter requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUtter(eval(args[0]),))

elif cmd == 'delUtter':
    if len(args) != 1:
        print('delUtter requires 1 args')
        sys.exit(1)
    pp.pprint(client.delUtter(eval(args[0]),))

elif cmd == 'postSlot':
    if len(args) != 1:
        print('postSlot requires 1 args')
        sys.exit(1)
    pp.pprint(client.postSlot(eval(args[0]),))

elif cmd == 'putSlot':
    if len(args) != 1:
        print('putSlot requires 1 args')
        sys.exit(1)
    pp.pprint(client.putSlot(eval(args[0]),))

elif cmd == 'getSlots':
    if len(args) != 1:
        print('getSlots requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSlots(eval(args[0]),))

elif cmd == 'getSlot':
    if len(args) != 1:
        print('getSlot requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSlot(eval(args[0]),))

elif cmd == 'delSlot':
    if len(args) != 1:
        print('delSlot requires 1 args')
        sys.exit(1)
    pp.pprint(client.delSlot(eval(args[0]),))

elif cmd == 'train':
    if len(args) != 1:
        print('train requires 1 args')
        sys.exit(1)
    pp.pprint(client.train(eval(args[0]),))

elif cmd == 'status':
    if len(args) != 1:
        print('status requires 1 args')
        sys.exit(1)
    pp.pprint(client.status(eval(args[0]),))

elif cmd == 'devver':
    if len(args) != 1:
        print('devver requires 1 args')
        sys.exit(1)
    pp.pprint(client.devver(eval(args[0]),))

elif cmd == 'prover':
    if len(args) != 1:
        print('prover requires 1 args')
        sys.exit(1)
    pp.pprint(client.prover(eval(args[0]),))

elif cmd == 'version':
    if len(args) != 1:
        print('version requires 1 args')
        sys.exit(1)
    pp.pprint(client.version(eval(args[0]),))

elif cmd == 'chat':
    if len(args) != 1:
        print('chat requires 1 args')
        sys.exit(1)
    pp.pprint(client.chat(eval(args[0]),))

elif cmd == 'online':
    if len(args) != 1:
        print('online requires 1 args')
        sys.exit(1)
    pp.pprint(client.online(eval(args[0]),))

elif cmd == 'offline':
    if len(args) != 1:
        print('offline requires 1 args')
        sys.exit(1)
    pp.pprint(client.offline(eval(args[0]),))

elif cmd == 'putSession':
    if len(args) != 1:
        print('putSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.putSession(eval(args[0]),))

elif cmd == 'getSession':
    if len(args) != 1:
        print('getSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSession(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
